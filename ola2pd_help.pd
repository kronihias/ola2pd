#N canvas 1607 173 888 480 10;
#X obj 269 132 bng 15 250 50 0 empty empty status 17 7 0 10 -262144
-1 -1;
#X msg 181 122 open;
#X msg 198 147 close;
#X msg 92 158 universe 0;
#X msg 8 158 universe 2;
#X text 520 434 Start and configure olad before sending open to ola2pd!
;
#X text 16 142 OLA Universe to bind;
#X floatatom 153 357 5 0 0 0 - - -;
#X floatatom 227 356 5 0 0 0 - - -;
#X floatatom 295 355 5 0 0 0 - - -;
#X floatatom 371 353 5 0 0 0 - - -;
#X floatatom 452 354 5 0 0 0 - - -;
#X obj 192 216 ola2pd 0;
#X msg 626 70 blackout \$1;
#X obj 626 47 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 141 378 Channel 1;
#X text 222 379 Channel 2;
#X text 295 381 Channel 3;
#X text 371 378 Channel 4;
#X text 453 377 Channel 108;
#X obj 214 313 route 1 2 3 4 108;
#X text 602 8 send all channels zero \, but store buffer;
#X text 603 26 buffer is restored after blackout 0;
#X text 181 105 CONNECT!;
#X text 744 447 (olad);
#X text 6 7 ola2pd - Interface for reading dmx data from Open Lighting
Arquitecture. (c) 2012-2013 Santi Nore√±a - GPL License;
#X text 361 98 send <dmx address> <value>;
#X text 11 40 extended for sending dmx data 04/2013 by Matthias Kronlachner
;
#X msg 47 221 get;
#N canvas 116 52 318 300 save-it 0;
#X obj 145 119 inlet;
#X obj 145 270 textfile;
#X obj 145 155 list prepend add;
#X obj 145 177 list trim;
#X msg 11 92 clear;
#X msg -28 216 write dmx.txt;
#X text -36 19 dump into textfile;
#X msg -9 127 dump;
#X obj -9 149 s \$0-ola;
#X obj -28 46 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj -28 66 t b b b;
#X obj -28 194 delay 1000;
#X connect 0 0 2 0;
#X connect 2 0 3 0;
#X connect 3 0 1 0;
#X connect 4 0 1 0;
#X connect 5 0 1 0;
#X connect 7 0 8 0;
#X connect 9 0 10 0;
#X connect 10 0 11 0;
#X connect 10 1 7 0;
#X connect 10 2 4 0;
#X connect 11 0 5 0;
#X restore 237 262 pd save-it;
#X msg 364 119 send 1 111;
#X obj 205 179 r \$0-ola;
#X msg 47 194 dump;
#X obj 626 92 s \$0-ola;
#N canvas 0 22 413 287 load-it 0;
#X obj 51 157 textfile;
#X obj 51 231 s \$0-ola;
#X msg 111 108 read dmx.txt \, rewind;
#X obj 51 105 until;
#X msg 51 85 512;
#X obj 51 29 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 51 179 list prepend send;
#X obj 51 201 list trim;
#X obj 51 49 t b b;
#X text 251 24 read dmx data from file;
#X text 265 55 <channel nr> <value> \;;
#X connect 0 0 6 0;
#X connect 2 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 3 0;
#X connect 5 0 8 0;
#X connect 6 0 7 0;
#X connect 7 0 1 0;
#X connect 8 0 4 0;
#X connect 8 1 2 0;
#X restore 311 261 pd load-it;
#N canvas 1996 550 340 224 send-random-values 0;
#X msg 32 145 send \$1 \$2;
#X obj 32 71 t b b;
#X obj 32 101 random 512;
#X obj 32 123 pack 0 0;
#X obj 98 101 random 256;
#X obj 32 24 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0 1
;
#X obj 32 49 metro 500;
#X text 118 148 send <dmx address> <value>;
#X obj 32 167 s \$0-ola;
#X connect 0 0 8 0;
#X connect 1 0 2 0;
#X connect 1 1 4 0;
#X connect 2 0 3 0;
#X connect 3 0 0 0;
#X connect 4 0 3 1;
#X connect 5 0 6 0;
#X connect 6 0 1 0;
#X restore 364 72 pd send-random-values;
#N canvas 0 22 587 237 list-output 0;
#X obj 95 41 inlet;
#X obj 95 81 list split 4;
#X obj 95 125 unpack f f f f;
#X floatatom 13 158 5 0 0 0 - - -;
#X floatatom 95 159 5 0 0 0 - - -;
#X floatatom 181 159 5 0 0 0 - - -;
#X floatatom 259 159 5 0 0 0 - - -;
#X text 1 174 Channel 1;
#X text 85 176 Channel 2;
#X text 170 176 Channel 3;
#X text 251 176 Channel 4;
#X text 172 52 each entry of the list represents one channel;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X connect 2 1 4 0;
#X connect 2 2 5 0;
#X connect 2 3 6 0;
#X restore 56 291 pd list-output;
#X text 64 273 long list output;
#X text 219 298 individual output;
#X text 243 245 dump outlet for saving status;
#X text 257 203 creation argument -> universe to bind -> you still
have to open;
#X text 450 170 sets a dmx channel in the buffer without sending it!
;
#X msg 365 144 send;
#X msg 386 169 set 7 111;
#X text 401 144 send buffer to ola without setting a channel;
#X text 531 287 if you have to change a lot of channels its better
to;
#X text 529 304 use the |set x y ( method and afterwards send the changes
with |send (;
#N canvas 0 22 447 345 how-to-deal-with-many-changes 0;
#X obj 41 294 s \$0-ola;
#X obj 41 94 metro 30;
#X obj 41 65 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0 1
;
#X msg 41 116 send;
#X text 65 58 send status of all channels to ola every 30 ms;
#X msg 164 254 set \$1 \$2;
#X obj 164 142 t b b;
#X obj 240 174 random 256;
#X obj 164 227 pack 0 0;
#X obj 164 98 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 36 10 if you change a lot of channels use set and send status
every eg. 30 ms with send;
#X obj 164 175 random 512;
#X obj 164 197 + 1;
#X text 193 96 generate many new channel values;
#X obj 164 120 metro 5;
#X connect 1 0 3 0;
#X connect 2 0 1 0;
#X connect 3 0 0 0;
#X connect 5 0 0 0;
#X connect 6 0 11 0;
#X connect 6 1 7 0;
#X connect 7 0 8 1;
#X connect 8 0 5 0;
#X connect 9 0 14 0;
#X connect 11 0 12 0;
#X connect 12 0 8 0;
#X connect 14 0 6 0;
#X restore 531 264 pd how-to-deal-with-many-changes;
#X text 733 265 !!!!!!;
#X connect 0 0 12 0;
#X connect 1 0 12 0;
#X connect 2 0 12 0;
#X connect 3 0 12 0;
#X connect 4 0 12 0;
#X connect 12 0 36 0;
#X connect 12 1 20 0;
#X connect 12 2 29 0;
#X connect 13 0 33 0;
#X connect 14 0 13 0;
#X connect 20 0 7 0;
#X connect 20 1 8 0;
#X connect 20 2 9 0;
#X connect 20 3 10 0;
#X connect 20 4 11 0;
#X connect 28 0 12 0;
#X connect 30 0 12 0;
#X connect 31 0 12 0;
#X connect 32 0 12 0;
#X connect 42 0 12 0;
#X connect 43 0 12 0;
